Assignment 4 readme File

------------------------------------------------------------------------
Student 1: What is your name?

Nickolas Casalinuovo

------------------------------------------------------------------------
Student 2: What is your name?



------------------------------------------------------------------------
How many late days are you using on this assignment?

0

------------------------------------------------------------------------
Student 1: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page to this section of the
readme file, and edit it as appropriate.



------------------------------------------------------------------------
Student 2: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page to this section of the
readme file, and edit it as appropriate.



------------------------------------------------------------------------
Student 1: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.



------------------------------------------------------------------------
Student 2: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.



------------------------------------------------------------------------
Student 1: What is your assessment of the assignment? Was it helpful?
Was it fun?



------------------------------------------------------------------------
Student 2: What is your assessment of the assignment? Was it helpful?
Was it fun?



------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?



------------------------------------------------------------------------
What warnings does splint generate for Part 2's checker, and what are
your disagreements with them? Copy the splint warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."



------------------------------------------------------------------------
What warnings does critTer generate on checkerDT.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."



------------------------------------------------------------------------
What warnings does splint generate on your Part 3 code, and what are
your disagreements with them? Copy the splint warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."



------------------------------------------------------------------------
What warnings does critTer generate on your Part 3 code, and what are
your disagreements with them? Copy the critTer warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."



------------------------------------------------------------------------
For each of the first three faulty BDT implementations required by Step
1.5, identify the function where there is a bug. You do not have to
identify the bug itself, only its location, but note that this must be
the location of the underlying error, which is not necessarily where
the error manifests itself or is "noticed" by the client.


      Executable         Function with the underlying error
===============================================================
         ./bdtBad1        BDT_insertRestOfPath()
---------------------------------------------------------------
         ./bdtBad2        BDT_newNode()
---------------------------------------------------------------
         ./bdtBad3        BDT_unlinkParentToChild()
===============================================================

For bdtBad4, you do not have to find the bug. Instead, indicate what
is different about trying to debug this executable in gdb versus the
other three:

The output in emacs is different than the output in gdb for bdtBad4.
The letters in front correspond to the value of the pointer.
We think it has something to do with remove

For bdtBad5, you do not have to find the bug. Instead, indicate one
hypothesis for how the program could crash within the DynArray module,
which we promise is itself correct:

In the program's toString function, the DynArray is being created with
a size of count+1, which is larger than the underlying node
representation. Then, when the in order traversal function is called
on a set of n elements, the uLength of the DynArray is n+1, which causes
overflow.

------------------------------------------------------------------------
What are your critiques of the given DT implementations, as
specified in Step 2.5?

Node_hasChild() uses binary search to find a node. However, it is not
used in dtGood.c, and it is used once in nodeGood.c. In dtGood.c,
instead, it checks if Node_getChild() is NULL. This is faster because
the underlying DynArray is represented with an expanding array, so
Node_getChild() of a childID is constant in time. So, in the one case
where nodeGood.c utilizes the function, the same work around that is used
in dtGood.c could be used, rendering Node_hasChild() useless.

DT_traversePath is redundant. Every time it is used, it can be swapped
for a single function call to DT_TraversePathFrom(path, root);

In nodeGood.c, Node_linkChild and Node_unlinkChild can

DT_removePath calls DT_removePathAt, DT_removePathFrom


------------------------------------------------------------------------
